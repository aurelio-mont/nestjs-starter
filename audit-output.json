{"type":"auditAdvisory","data":{"resolution":{"id":566,"path":"@nestjs-modules/mailer>css-inliner>less>request>hawk>boom>hoek","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"2.16.3","paths":["@nestjs-modules/mailer>css-inliner>less>request>hawk>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>cryptiles>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>sntp>hoek"]}],"id":566,"created":"2018-04-20T21:25:58.421Z","updated":"2019-06-19T20:16:59.758Z","deleted":null,"title":"Prototype Pollution","found_by":{"name":"HoLyVieR"},"reported_by":{"name":"HoLyVieR"},"module_name":"hoek","cves":["CVE-2018-3728"],"vulnerable_versions":"<= 4.2.0 || >= 5.0.0 < 5.0.3","patched_versions":"> 4.2.0 < 5.0.0 || >= 5.0.3","overview":"Versions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.","recommendation":"Update to version 4.2.1, 5.0.3 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/310439)","access":"public","severity":"moderate","cwe":"CWE-471","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/566"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":566,"path":"@nestjs-modules/mailer>css-inliner>less>request>hawk>cryptiles>boom>hoek","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"2.16.3","paths":["@nestjs-modules/mailer>css-inliner>less>request>hawk>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>cryptiles>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>sntp>hoek"]}],"id":566,"created":"2018-04-20T21:25:58.421Z","updated":"2019-06-19T20:16:59.758Z","deleted":null,"title":"Prototype Pollution","found_by":{"name":"HoLyVieR"},"reported_by":{"name":"HoLyVieR"},"module_name":"hoek","cves":["CVE-2018-3728"],"vulnerable_versions":"<= 4.2.0 || >= 5.0.0 < 5.0.3","patched_versions":"> 4.2.0 < 5.0.0 || >= 5.0.3","overview":"Versions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.","recommendation":"Update to version 4.2.1, 5.0.3 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/310439)","access":"public","severity":"moderate","cwe":"CWE-471","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/566"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":566,"path":"@nestjs-modules/mailer>css-inliner>less>request>hawk>hoek","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"2.16.3","paths":["@nestjs-modules/mailer>css-inliner>less>request>hawk>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>cryptiles>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>sntp>hoek"]}],"id":566,"created":"2018-04-20T21:25:58.421Z","updated":"2019-06-19T20:16:59.758Z","deleted":null,"title":"Prototype Pollution","found_by":{"name":"HoLyVieR"},"reported_by":{"name":"HoLyVieR"},"module_name":"hoek","cves":["CVE-2018-3728"],"vulnerable_versions":"<= 4.2.0 || >= 5.0.0 < 5.0.3","patched_versions":"> 4.2.0 < 5.0.0 || >= 5.0.3","overview":"Versions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.","recommendation":"Update to version 4.2.1, 5.0.3 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/310439)","access":"public","severity":"moderate","cwe":"CWE-471","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/566"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":566,"path":"@nestjs-modules/mailer>css-inliner>less>request>hawk>sntp>hoek","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"2.16.3","paths":["@nestjs-modules/mailer>css-inliner>less>request>hawk>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>cryptiles>boom>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>hoek","@nestjs-modules/mailer>css-inliner>less>request>hawk>sntp>hoek"]}],"id":566,"created":"2018-04-20T21:25:58.421Z","updated":"2019-06-19T20:16:59.758Z","deleted":null,"title":"Prototype Pollution","found_by":{"name":"HoLyVieR"},"reported_by":{"name":"HoLyVieR"},"module_name":"hoek","cves":["CVE-2018-3728"],"vulnerable_versions":"<= 4.2.0 || >= 5.0.0 < 5.0.3","patched_versions":"> 4.2.0 < 5.0.0 || >= 5.0.3","overview":"Versions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.","recommendation":"Update to version 4.2.1, 5.0.3 or later.","references":"- [HackerOne Report](https://hackerone.com/reports/310439)","access":"public","severity":"moderate","cwe":"CWE-471","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/566"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"@nestjs/cli>@angular-devkit/schematics-cli>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.2.0","paths":["@nestjs/cli>@angular-devkit/schematics-cli>minimist"]},{"version":"0.0.10","paths":["@nestjs-modules/mailer>css-inliner>handlebars>optimist>minimist","@nestjs-modules/mailer>handlebars>optimist>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"@nestjs-modules/mailer>css-inliner>handlebars>optimist>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.2.0","paths":["@nestjs/cli>@angular-devkit/schematics-cli>minimist"]},{"version":"0.0.10","paths":["@nestjs-modules/mailer>css-inliner>handlebars>optimist>minimist","@nestjs-modules/mailer>handlebars>optimist>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1179,"path":"@nestjs-modules/mailer>handlebars>optimist>minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.2.0","paths":["@nestjs/cli>@angular-devkit/schematics-cli>minimist"]},{"version":"0.0.10","paths":["@nestjs-modules/mailer>css-inliner>handlebars>optimist>minimist","@nestjs-modules/mailer>handlebars>optimist>minimist"]}],"id":1179,"created":"2019-09-23T15:01:43.049Z","updated":"2020-03-18T19:41:45.921Z","deleted":null,"title":"Prototype Pollution","found_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"reported_by":{"link":"https://www.checkmarx.com/resources/blog/","name":"Checkmarx Research Team","email":""},"module_name":"minimist","cves":[],"vulnerable_versions":"<0.2.1 || >=1.0.0 <1.2.3","patched_versions":">=0.2.1 <1.0.0 || >=1.2.3","overview":"Affected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--__proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `--__proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n","recommendation":"Upgrade to versions 0.2.1, 1.2.3 or later.","references":"- [GitHub commit 1](https://github.com/substack/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f#diff-a1e0ee62c91705696ddb71aa30ad4f95)\n- [GitHub commit 2](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)","access":"public","severity":"low","cwe":"CWE-471","metadata":{"module_type":"","exploitability":1,"affected_components":""},"url":"https://npmjs.com/advisories/1179"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1464,"path":"@nestjs-modules/mailer>css-inliner>less>request>hawk>cryptiles","dev":false,"bundled":false,"optional":false},"advisory":{"findings":[{"version":"2.0.5","paths":["@nestjs-modules/mailer>css-inliner>less>request>hawk>cryptiles"]}],"id":1464,"created":"2020-01-23T18:13:40.195Z","updated":"2020-01-30T20:36:38.722Z","deleted":null,"title":"Insufficient Entropy","found_by":{"link":"","name":"Unknown","email":""},"reported_by":{"link":"","name":"Unknown","email":""},"module_name":"cryptiles","cves":["CVE-2018-1000620"],"vulnerable_versions":"<4.1.2","patched_versions":">=4.1.2","overview":"Versions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.","recommendation":"Upgrade to version 4.1.2. The package is deprecated and has been moved to `@hapi/cryptiles` and it is strongly recommended to use the maintained package.","references":"- [GitHub PR](https://github.com/hapijs/cryptiles/issues/34)","access":"public","severity":"high","cwe":"CWE-331","metadata":{"module_type":"","exploitability":4,"affected_components":""},"url":"https://npmjs.com/advisories/1464"}}}
{"type":"auditSummary","data":{"vulnerabilities":{"info":0,"low":3,"moderate":4,"high":1,"critical":0},"dependencies":1317648,"devDependencies":0,"optionalDependencies":0,"totalDependencies":1317648}}
